<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Lee E. Hinman's Blog]]></title>
<description><![CDATA[Lee E. Hinman's Blog]]></description>
<link>https://hinman.github.io/</link>
<lastBuildDate>Sat, 06 Jul 2024 10:30:00 -0500</lastBuildDate>
<item>
  <title><![CDATA[troff resources]]></title>
  <description><![CDATA[
<p>
I've been on a quest to reduce my dependence on LaTeX.
This isn't because LaTeX produces "bad" looking documents, on the
contrary they are usually quite beautiful.  The "problem" is that the
MacTex or TexLive distributions are quite large and compiling documents is
rather slow.  <code>groff</code> is able to do most of what I want and is already
available on my Linux/FreeBSD/OS X systems.  But the <code>groff</code>
documentation is a little sparse, so additional resources are required.
</p>

<dl class="org-dl">
<dt><a href="https://github.com/larrykollar/Unix-Text-Processing">Unix Text Processing</a></dt><dd>Does a pretty good job at being an
introductory text into troff, tbl, eqn, pic and macros</dd>
<dt><a href="https://n-t-roff.github.io/heirloom/doctools/troff.pdf">Heirloom Nroff/Troff User's Manual</a></dt><dd>This is more of a reference
document, but it does have a good tutorial section as well</dd>
<dt><a href="https://www.schaffter.ca/mom/momdoc/toc.html">MOM macros</a></dt><dd>This is a "modern" macro set, and in general it does a
very good job producing PDFs</dd>
</dl>
<div class="taglist"><a href="https://hinman.github.io/tags.html">Tags</a>: <a href="https://hinman.github.io/tag-troff.html">troff</a> </div>]]></description>
  <category><![CDATA[troff]]></category>
  <link>https://hinman.github.io/2024-07-06-troff-resources.html</link>
  <guid>https://hinman.github.io/2024-07-06-troff-resources.html</guid>
  <pubDate>Sat, 06 Jul 2024 10:01:00 -0500</pubDate>
</item>
<item>
  <title><![CDATA[OS X, Yubikey and gpg-agent]]></title>
  <description><![CDATA[
<p>
Since I store my <a href="https://github.com/drduh/YubiKey-Guide">SSH private key on my Yubikey</a>, I need to launch
<code>gpg-agent</code> and replace the value of the <code>SSH_AUTH_SOCK</code> environment
variable to point to the <code>gpg-agent</code> socket.
</p>

<p>
So at boot time I need <code>gpg-agent</code> to start.  That is handled with
the following LaunchAgent script stored in
<code>~/Library/LaunchAgents/homebrew.gpg.gpg-agent.plist</code>
</p>

<div class="org-src-container">
<pre class="src src-xml">&lt;?<span style="color: #718c00;">xml</span> <span style="color: #8959a8;">version="1.0" encoding="UTF-8"</span>?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;<span style="color: #f5871f;">plist</span> <span style="color: #eab700;">version</span>=<span style="color: #3e999f;">"1.0"</span>&gt;
&lt;<span style="color: #f5871f;">dict</span>&gt;
  <span style="color: #8e908c; font-style: italic;">&lt;!-- </span><span style="color: #8e908c; font-style: italic;">Sets a name for a task</span><span style="color: #8e908c; font-style: italic;"> --&gt;</span>
  &lt;<span style="color: #f5871f;">key</span>&gt;Label&lt;/<span style="color: #f5871f;">key</span>&gt;
  &lt;<span style="color: #f5871f;">string</span>&gt;homebrew.gpg.gpg-agent&lt;/<span style="color: #f5871f;">string</span>&gt;
  <span style="color: #8e908c; font-style: italic;">&lt;!-- </span><span style="color: #8e908c; font-style: italic;">Sets a command to run and its options</span><span style="color: #8e908c; font-style: italic;"> --&gt;</span>
  &lt;<span style="color: #f5871f;">key</span>&gt;ProgramArguments&lt;/<span style="color: #f5871f;">key</span>&gt;
  &lt;<span style="color: #f5871f;">array</span>&gt;
    &lt;<span style="color: #f5871f;">string</span>&gt;/opt/homebrew/bin/gpgconf&lt;/<span style="color: #f5871f;">string</span>&gt;
    &lt;<span style="color: #f5871f;">string</span>&gt;--launch&lt;/<span style="color: #f5871f;">string</span>&gt;
    &lt;<span style="color: #f5871f;">string</span>&gt;gpg-agent&lt;/<span style="color: #f5871f;">string</span>&gt;
  &lt;/<span style="color: #f5871f;">array</span>&gt;
  <span style="color: #8e908c; font-style: italic;">&lt;!-- </span><span style="color: #8e908c; font-style: italic;">Tells it to run the task once the XML is loaded</span><span style="color: #8e908c; font-style: italic;"> --&gt;</span>
  &lt;<span style="color: #f5871f;">key</span>&gt;RunAtLoad&lt;/<span style="color: #f5871f;">key</span>&gt;
  &lt;<span style="color: #f5871f;">true</span>/&gt;
&lt;/<span style="color: #f5871f;">dict</span>&gt;
&lt;/<span style="color: #f5871f;">plist</span>&gt;
</pre>
</div>

<p>
Now that <code>gpg-agent</code> is started I need to replace the <code>SSH_AUTH_SOCK</code>
environment variable.  That is handled with the following LaunchAgent
script stored in <code>~/Library/LaunchAgents/link-ssh-auth-sock.plist</code>
</p>

<div class="org-src-container">
<pre class="src src-xml">&lt;?<span style="color: #718c00;">xml</span> <span style="color: #8959a8;">version="1.0" encoding="UTF-8"</span>?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;<span style="color: #f5871f;">plist</span> <span style="color: #eab700;">version</span>=<span style="color: #3e999f;">"1.0"</span>&gt;
&lt;<span style="color: #f5871f;">dict</span>&gt;
  &lt;<span style="color: #f5871f;">key</span>&gt;Label&lt;/<span style="color: #f5871f;">key</span>&gt;
  &lt;<span style="color: #f5871f;">string</span>&gt;link-ssh-auth-sock&lt;/<span style="color: #f5871f;">string</span>&gt;
  &lt;<span style="color: #f5871f;">key</span>&gt;ProgramArguments&lt;/<span style="color: #f5871f;">key</span>&gt;
  &lt;<span style="color: #f5871f;">array</span>&gt;
    &lt;<span style="color: #f5871f;">string</span>&gt;/bin/sh&lt;/<span style="color: #f5871f;">string</span>&gt;
    &lt;<span style="color: #f5871f;">string</span>&gt;-c&lt;/<span style="color: #f5871f;">string</span>&gt;
    &lt;<span style="color: #f5871f;">string</span>&gt;/bin/ln -sf $HOME/.gnupg/S.gpg-agent.ssh $SSH_AUTH_SOCK&lt;/<span style="color: #f5871f;">string</span>&gt;
  &lt;/<span style="color: #f5871f;">array</span>&gt;
  &lt;<span style="color: #f5871f;">key</span>&gt;RunAtLoad&lt;/<span style="color: #f5871f;">key</span>&gt;
  &lt;<span style="color: #f5871f;">true</span>/&gt;
&lt;/<span style="color: #f5871f;">dict</span>&gt;
&lt;/<span style="color: #f5871f;">plist</span>&gt;
</pre>
</div>

<p>
Now when I login, <code>gpg-agent</code> will be started and ssh will get it's
private keys from YubiKey.  The only problem is, occasionally when OS
X resumes from sleep or multiple people log in, <code>gpg-agent</code> can die or
get stuck.  So I have the following script I keep in
<code>~/bin/gpg_restart.sh</code>  This will restart <code>gpg-agent</code> and re-link
<code>SSH_AUTH_SOCK</code> using the LaunchAgent scripts.
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #8e908c; font-style: italic;">#</span><span style="color: #8e908c; font-style: italic;">!/bin/</span><span style="color: #718c00;">sh</span>

/bin/launchctl kickstart -k gui/${<span style="color: #eab700;">UID</span>}/homebrew.gpg.gpg-agent
/bin/launchctl kickstart -k gui/${<span style="color: #eab700;">UID</span>}/link-ssh-auth-sock
</pre>
</div>
<div class="taglist"><a href="https://hinman.github.io/tags.html">Tags</a>: <a href="https://hinman.github.io/tag-os_x.html">os_x</a> <a href="https://hinman.github.io/tag-yubikey.html">yubikey</a> </div>]]></description>
  <category><![CDATA[os_x]]></category>
  <category><![CDATA[yubikey]]></category>
  <link>https://hinman.github.io/2024-03-24-os-x,-yubikey-and-gpg-agent.html</link>
  <guid>https://hinman.github.io/2024-03-24-os-x,-yubikey-and-gpg-agent.html</guid>
  <pubDate>Sun, 24 Mar 2024 17:29:00 -0500</pubDate>
</item>
<item>
  <title><![CDATA[go-ts-mode and eglot]]></title>
  <description><![CDATA[
<p>
Since I've adopted Emacs 29, I wanted to try switching my Emacs go development
from <a href="https://github.com/dominikh/go-mode.el">go-mode</a> and <a href="https://github.com/emacs-lsp/lsp-mode">lsp-mode</a> to the built in <a href="https://lists.gnu.org/archive/html/emacs-devel/2022-11/msg01443.html">tree-sitter</a> and built in
<a href="https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=83fbda715973f57dc49fe002d255ecaff8273154">eglot</a>.  This involved a few missteps and re-tries so I thought I'd
write it down.
</p>

<div id="outline-container-orge79be3d" class="outline-2">
<h2 id="orge79be3d">gopls Language Server</h2>
<div class="outline-text-2" id="text-orge79be3d">
<p>
I already had <a href="https://pkg.go.dev/golang.org/x/tools/gopls">gopls</a> installed.  But if you are starting from scratch
you need to have this installed.
</p>

<div class="org-src-container">
<pre class="src src-shell">go install golang.org/x/tools/gopls@latest
</pre>
</div>
</div>
</div>

<div id="outline-container-org011b591" class="outline-2">
<h2 id="org011b591">eglot mode</h2>
<div class="outline-text-2" id="text-org011b591">
<p>
Because eglot is built-in you don't technically need this, but it
makes it nice if you happen to use your emacs config on an older
version
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(use-package eglot
  :ensure t)
</pre>
</div>
</div>
</div>

<div id="outline-container-org10f58fc" class="outline-2">
<h2 id="org10f58fc">Emacs tree-sitter support</h2>
<div class="outline-text-2" id="text-org10f58fc">
<p>
Emacs 29 has to be compiled with treesitter support.  Since I use
<a href="https://github.com/d12frosted/homebrew-emacs-plus">emacs-plus</a> to install Emacs on OS X, this "just worked" since I
had installed treesitter libraries before I compiled Emacs.
</p>

<div class="org-src-container">
<pre class="src src-shell">brew install tree-sitter
brew tap d12frosted/emacs-plus
brew install emacs-plus@29 --with-xwidgets --with-poll --with-nobu417-big-sur-icon
</pre>
</div>
</div>
</div>

<div id="outline-container-org3459abf" class="outline-2">
<h2 id="org3459abf">tree-sitter grammar and mode selection</h2>
<div class="outline-text-2" id="text-org3459abf">
<p>
To use tree-sitter you need to have the grammar for the language
installed and you need to use the tree-sitter aware major mode that
matches the kind of file you are editing.  Luckily there is a package
that helps with this called <a href="https://github.com/renzmann/treesit-auto">treesit-auto</a>.  With the config below, 
you will be prompted to install the grammar if it doesn't exist
already.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc64cfa7" class="outline-2">
<h2 id="orgc64cfa7">go-ts mode</h2>
<div class="outline-text-2" id="text-orgc64cfa7">
<p>
<code>go-ts-mode</code> has to turn on eglot and I prefer to have my editor do
the equivalent of <code>goimports</code> and <code>go fmt</code> when I save a file.
Getting the <code>goimports</code> to work required a little bit of work to get
the order of <code>before-save-hook</code> correct.  <a href="https://github.com/joaotavora/eglot/issues/574#issuecomment-1401023985">This</a> eglot issue had some
nice pointers.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun my-eglot-organize-imports () (interactive)
       (eglot-code-actions nil nil "source.organizeImports" t))
(add-hook 'go-ts-mode-hook
          (lambda () (add-hook 'before-save-hook 'my-eglot-organize-imports nil 'local)))
(add-hook 'go-ts-mode-hook
          (lambda () (add-hook 'before-save-hook 'eglot-format-buffer)))
(add-hook 'go-ts-mode-hook 'eglot-ensure)
</pre>
</div>
</div>
</div>

<div id="outline-container-org2c9ae03" class="outline-2">
<h2 id="org2c9ae03">eldoc mode</h2>
<div class="outline-text-2" id="text-org2c9ae03">
<p>
eglot uses eldoc to display function help, which is fine, but by
default it can take up a lot of space.  So this limits it to 2 lines.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(require 'eldoc)
(setq eldoc-echo-area-use-multiline-p 2)
</pre>
</div>
</div>
</div>

<div id="outline-container-org9866571" class="outline-2">
<h2 id="org9866571">company mode</h2>
<div class="outline-text-2" id="text-org9866571">
<p>
I was using company mode before for code completion, so this isn't a
change. Adding it here for completeness of a go programming
environment.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(use-package company
  :ensure t
  :config
  (setq company-idle-delay 10)
  (setq company-minimum-prefix-length 2)
  (setq company-dabbrev-downcase nil)
  (add-hook 'after-init-hook 'global-company-mode)
  (global-set-key (kbd "M-/") #'company-complete))
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://hinman.github.io/tags.html">Tags</a>: <a href="https://hinman.github.io/tag-emacs.html">emacs</a> <a href="https://hinman.github.io/tag-golang.html">golang</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[golang]]></category>
  <link>https://hinman.github.io/2024-03-23-go-ts-mode-and-eglot.html</link>
  <guid>https://hinman.github.io/2024-03-23-go-ts-mode-and-eglot.html</guid>
  <pubDate>Sat, 23 Mar 2024 11:16:00 -0500</pubDate>
</item>
</channel>
</rss>
